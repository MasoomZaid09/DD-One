name: Android Release Build & Upload

on:
  push:
    branches:
      - main    # ya release branch jo tu use kare
  workflow_dispatch: # manually trigger karne ka option

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PROJECT_CODE: "001"
      API_UPLOAD_URL: "http://3.25.213.83:8000/api/s3/upload-app"

    steps:
      # 1) Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2) Setup JDK
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # 3) Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # 4) Decode keystore
      - name: Decode Keystore
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > release-key.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      # 5) Build signed APK
      - name: Build Release APK
        run: |
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file=release-key.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}"

      # 6) Upload APK to API
      - name: Upload APK to API
        run: |
          VERSION=$(./gradlew -q printVersionName) || VERSION="1.0.0"
          DATE=$(date +"%d %B %Y")

          curl -X POST "$API_UPLOAD_URL" \
            -F "file=@androidApp/build/outputs/apk/release/composeApp-release.apk" \
            -F "project_code=$PROJECT_CODE" \
            -F "version=$VERSION" \
            -F "dateTime=$DATE" \
          -v

      # 7) Cleanup code
      - name: Cleanup
        run: rm -f release-key.jks

